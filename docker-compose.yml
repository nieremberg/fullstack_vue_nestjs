version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fullstack-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-fullstack_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fullstack-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-fullstack_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend NestJS API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: fullstack-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres123}@postgres:5432/${DB_NAME:-fullstack_db}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - fullstack-network
    command: npm run start:dev
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Vue.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: fullstack-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3001}
      VITE_APP_NAME: ${VITE_APP_NAME:-Fullstack App}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - fullstack-network
    command: npm run dev -- --host 0.0.0.0
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: fullstack-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./frontend/dist:/usr/share/nginx/html
    depends_on:
      - frontend
      - backend
    networks:
      - fullstack-network
    profiles:
      - production

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: fullstack-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - fullstack-network
    command: redis-server --appendonly yes
    profiles:
      - production

  # Storybook (Development)
  storybook:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: fullstack-storybook
    restart: unless-stopped
    environment:
      NODE_ENV: development
    ports:
      - "${STORYBOOK_PORT:-6006}:6006"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - fullstack-network
    command: npm run storybook
    profiles:
      - development

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  fullstack-network:
    driver: bridge
