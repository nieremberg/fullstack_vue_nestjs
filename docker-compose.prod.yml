version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: fullstack-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - fullstack-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: fullstack-backend-prod
    restart: always
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN}
    expose:
      - "3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - fullstack-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: fullstack-frontend-prod
    restart: always
    expose:
      - "80"
    networks:
      - fullstack-network

  nginx:
    image: nginx:alpine
    container_name: fullstack-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - fullstack-network

  redis:
    image: redis:7-alpine
    container_name: fullstack-redis-prod
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - fullstack-network
    command: redis-server --appendonly yes

volumes:
  postgres_data:
  redis_data:

networks:
  fullstack-network:
    driver: bridge
